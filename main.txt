from picamera2 import Picamera2, Preview
import cv2
from ultralytics import YOLO
import numpy as np

def main():
    # Initialize the Raspberry Pi Camera
    picam2 = Picamera2()
    config = picam2.create_preview_configuration()
    picam2.configure(config)

    # Start the camera
    picam2.start()

    # Load your custom YOLOv8 model
    model = YOLO("best.pt")  # Replace with the path to your .pt model

    print("Starting object detection. Press 'Ctrl+C' to exit.")

    try:
        while True:
            # Capture frame from Raspberry Pi Camera
            frame = picam2.capture_array()

            # Convert the frame to RGB (YOLO expects RGB format)
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Perform object detection
            results = model.predict(rgb_frame, conf=0.5, verbose=False)  # Set your confidence threshold

            # Draw bounding boxes on the frame
            for result in results[0].boxes.data:
                x1, y1, x2, y2, conf, cls = result
                label = f"{model.names[int(cls)]} {conf:.2f}"
                x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))

                # Draw rectangle and label
                cv2.rectangle(rgb_frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                cv2.putText(rgb_frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

            # Display the frame
            cv2.imshow("Object Detection", rgb_frame)

            # Break loop if 'q' is pressed
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    except KeyboardInterrupt:
        print("\nExiting...")

    # Clean up
    picam2.stop()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
